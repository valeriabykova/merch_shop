// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	merch "merch_avito/merch"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// BuyItem provides a mock function with given fields: ctx, userID, itemName
func (_m *Repository) BuyItem(ctx context.Context, userID int64, itemName string) error {
	ret := _m.Called(ctx, userID, itemName)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, userID, itemName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalance provides a mock function with given fields: ctx, userID
func (_m *Repository) GetBalance(ctx context.Context, userID int64) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInventory provides a mock function with given fields: ctx, userID
func (_m *Repository) GetInventory(ctx context.Context, userID int64) ([]merch.InventoryItem, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetInventory")
	}

	var r0 []merch.InventoryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]merch.InventoryItem, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []merch.InventoryItem); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]merch.InventoryItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecievedCoins provides a mock function with given fields: ctx, userID
func (_m *Repository) GetRecievedCoins(ctx context.Context, userID int64) ([]merch.RecievedCoins, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecievedCoins")
	}

	var r0 []merch.RecievedCoins
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]merch.RecievedCoins, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []merch.RecievedCoins); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]merch.RecievedCoins)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSentCoins provides a mock function with given fields: ctx, userID
func (_m *Repository) GetSentCoins(ctx context.Context, userID int64) ([]merch.SentCoins, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSentCoins")
	}

	var r0 []merch.SentCoins
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]merch.SentCoins, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []merch.SentCoins); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]merch.SentCoins)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields: ctx, username
func (_m *Repository) GetUserID(ctx context.Context, username string) (int64, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCoin provides a mock function with given fields: ctx, fromUser, toUser, amount
func (_m *Repository) SendCoin(ctx context.Context, fromUser int64, toUser int64, amount int64) error {
	ret := _m.Called(ctx, fromUser, toUser, amount)

	if len(ret) == 0 {
		panic("no return value specified for SendCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) error); ok {
		r0 = rf(ctx, fromUser, toUser, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
